function ps7()
% Nikhil Kamthe
% 861245635
% 11/24/2016
% CS 229
% PS 7
tic;
trainData = load('spamtrain.ascii','-ascii');
testData = load('spamtest.ascii','-ascii');
x_test = testData(:,1:end-1);
y_test = testData(:,end);
x_train = trainData(:,1:end-1);
y_train = trainData(:,end);
numberOfTreesArray = floor(logspace(0,2+log10(5),10));
depth = 2;
index = 1;
baggingTestErrorArray = zeros(1,10);
boostingTestErrorArray = zeros(1,10);
[treesBagging] = bagging(trainData,depth,numberOfTreesArray(end));
[treesBoosting,w] = boosting(trainData,depth,numberOfTreesArray(end));
for numberOfTrees = numberOfTreesArray
    y_pred = predictBagging(x_test,treesBagging,numberOfTrees);
    mismatches = find(sign(y_test)~=sign(y_pred));
    baggingTestErrorArray(index) = (length(mismatches)/length(y_test))*100;
    y_pred = predictBoosting(x_test,treesBoosting,w,numberOfTrees);
    mismatches = find(sign(y_test)~=sign(y_pred));
    boostingTestErrorArray(index) = (length(mismatches)/length(y_test))*100;
    index = index + 1;
end
semilogx(numberOfTreesArray,baggingTestErrorArray,'-');
hold on;
semilogx(numberOfTreesArray,boostingTestErrorArray,'-');

[m,d] = size(x_train);
x_retrain_bagging = zeros(m,numberOfTreesArray(end));
x_retrain_boosting = zeros(m,numberOfTreesArray(end));
for i = 1:numberOfTreesArray(end)
    x_retrain_bagging(:,i) = dt(x_train,treesBagging{i});
    x_retrain_boosting(:,i) = dt(x_train,treesBoosting{i});
end
x_test = testData(:,1:end-1);
y_test = testData(:,end);
[m,d] = size(x_test);
x_retest_bagging = zeros(m,numberOfTreesArray(end));
x_retest_boosting = zeros(m,numberOfTreesArray(end));
for i = 1:numberOfTreesArray(end)
    x_retest_bagging(:,i) = dt(x_test,treesBagging{i});
    x_retest_boosting(:,i) = dt(x_test,treesBoosting{i});
end
x_retest_bagging = [ones(m,1) x_retest_bagging];
x_retest_boosting = [ones(m,1) x_retest_boosting];
lambda = logspace(-4,-1,10);
[baggingTestErrorReWeightedArray,numberOfTreesArrayBagging] = errorRatesForRecomputeWeights(x_retrain_bagging,x_retest_bagging,y_train,y_test,lambda);
[boostingingTestErrorReWeightedArray,numberOfTreesArrayBoosting] = errorRatesForRecomputeWeights(x_retrain_boosting,x_retest_boosting,y_train,y_test,lambda);

semilogx(numberOfTreesArrayBagging,baggingTestErrorReWeightedArray,'-');
semilogx(numberOfTreesArrayBoosting,boostingingTestErrorReWeightedArray,'-');
xlabel('number of trees');
ylabel('error rate');
title('error rate vs number of trees');
legend('bagging','boosting','bagging reweighted','boosting reweighted');
xlim([0 500]);
hold off;
toc;
end

function [errorRates,numberOfTrees] = errorRatesForRecomputeWeights(x_train,x_test,y_train,y_test,lambda)
[w,other] = lassoglm(x_train,y_train==1,'binomial','Standardize',0,'Lambda',lambda);
w = 2*w;
w0 = 2*other.Intercept-1;
w = [w0;w];
y_pred = x_test*w;
y_pred(y_pred>=0) = 1;
y_pred(y_pred<0) = -1;
[m,d] = size(y_pred);
errorRates = zeros(1,d);
numberOfTrees = zeros(1,d);
for index = 1:d
    mismatches = find(sign(y_test)~=sign(y_pred(:,index)));
    errorRates(index) = (length(mismatches)/length(y_test))*100;
    numberOfTrees(index) = sum(w(:,index)~=0);
end
end

function y = predictBagging(x,trees,numberOfTrees)
% This method uses the trees generated by the bagging function to
% predict the output for input data. It uses numberOfTrees param to use
% only a part of trees to predict the output.

y = zeros(length(x),1);
for i = 1:numberOfTrees
    y = y + dt(x,trees{i});
end
y = y/numberOfTrees;
y(y>=0) = 1;
y(y<0) = -1;
end

function y = predictBoosting(x,trees,w,numberOfTrees)
% This method uses the trees generated and the corresponding weights
% by the boosting function to predict the output for input data. It uses 
% numberOfTrees param to use only a part of trees to predict the output.

y = zeros(length(x),1);
for i = 1:numberOfTrees
    y = y + w(i)*dt(x,trees{i});
end
y(y>=0) = 1;
y(y<0) = -1;
end